IMGUR:
user - zimzoom888
client_id - 15cfe7be1216014
client_secret - 4d5988b6b81d20afdbed2cead7280bec2fe88be8
For public read-only and anonymous resources, such as getting image info, looking up user comments, etc. all you need to do is send an authorization header with your client_id in your requests.


REDDIT
ID? : UO79QSYxu2ujuw
Secret : XRfPWRnRN0O2Wfpwmf-frAgGAmA
Required: A user agent is a unique identifier that helps Reddit determine the source of network requests. To use Reddit’s API, you need a unique and descriptive user agent. The recommended format is <platform>:<app ID>:<version string> (by /u/<Reddit username>). For example, android:com.example.myredditapp:v1.2.3 (by /u/kemitche). Read more about user-agents at Reddit’s API wiki page.

Reddit uses UNIX timestamps. Clean up time:
def get_date(created):
    return dt.datetime.fromtimestamp(created)
_timestamp = topics_data["created"].apply(get_date)
topics_data = topics_data.assign(timestamp = _timestamp)

#Submissions have a comments attribute that is a CommentForest instance. 
#A CommentForest is a list of top-level comments each of which contains a CommentForest of replies.
# That instance is iterable and represents the top-level comments of the submission by the default comment sort (best). 
# If you instead want to iterate over all comments as a flattened list you can call the list() method on a CommentForest instance.

How to ignore morecomments instances:
from praw.models import MoreComments
for top_level_comment in submission.comments:
    if isinstance(top_level_comment, MoreComments):
        continue
    print(top_level_comment.body)

How to replace morecomments:
submission.comments.replace_more(limit=None)
for top_level_comment in submission.comments:
    print(top_level_comment.body)

Iterate over second level comments:
for top_level_comment in submission.comments:
    for second_level_comment in top_level_comment.replies:
        print(second_level_comment.body)

Breadth first comment forest traversal using queue:
submission.comments.replace_more(limit=None)
comment_queue = submission.comments[:]  # Seed with top-level
while comment_queue:
    comment = comment_queue.pop(0)
    print(comment.body)
    comment_queue.extend(comment.replies)

"The above code will output all the top-level comments, followed by second-level, third-level, etc. While it is awesome to be able to do your own breadth-first traversals, CommentForest provides a convenience method, list(), which returns a list of comments traversed in the same order as the code above. Thus the above can be rewritten as:"
submission.comments.replace_more(limit=None)
for comment in submission.comments.list():
    print(comment.body)

========
PUSHSHIFT
========

q=(subreddit:pics) AND score:>1000 AND domain:imgur.com&sort=created_utc:desc&size=50

q=(subreddit:amitheasshole) AND score:>1000 AND domain:imgur.com&sort=created_utc:desc&size=50

